<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zxd's Blog</title><link>http://localhost:1313/</link><description>Recent content on Zxd's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 12 Dec 2021 21:24:37 +0800</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTPS</title><link>http://localhost:1313/post/2021-12-12-https/</link><pubDate>Sun, 12 Dec 2021 21:24:37 +0800</pubDate><guid>http://localhost:1313/post/2021-12-12-https/</guid><description>HTTP常用的请求头 accept-encoding / accept-languate user-agent: 客户端信息 cache-control 强缓存 connection：keep-alive 保持持久连接 content-type: application/json 请求返回格式 Referer: https://juejin.cn/ Referer 请求头包含了当前请</description></item><item><title>浏览器缓存</title><link>http://localhost:1313/post/2021-12-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</link><pubDate>Sun, 12 Dec 2021 15:31:57 +0800</pubDate><guid>http://localhost:1313/post/2021-12-12-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</guid><description>浏览器缓存 缓存位置 Service Worker Memory Cache Disk Cache Push Cache 优先级从高到低 Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用Service Worker ，传输协议必</description></item><item><title>DNS</title><link>http://localhost:1313/post/dns/</link><pubDate>Fri, 10 Dec 2021 17:40:54 +0800</pubDate><guid>http://localhost:1313/post/dns/</guid><description>HTTP HTTP (HyperText Transfer Protocol)，超文本传输协议。 HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范。 CDN Content Delivery Network,</description></item><item><title>TCP UDP</title><link>http://localhost:1313/post/2021-12-09-tcp-udp/</link><pubDate>Thu, 09 Dec 2021 00:04:11 +0800</pubDate><guid>http://localhost:1313/post/2021-12-09-tcp-udp/</guid><description>🎃计算机网络结构 应用层 (application layer) 应用层是体系结构中的最高层。应用层的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程间通信</description></item><item><title>柯里化Curry</title><link>http://localhost:1313/post/2021-12-05-%E6%9F%AF%E9%87%8C%E5%8C%96curry/</link><pubDate>Sun, 05 Dec 2021 21:11:44 +0800</pubDate><guid>http://localhost:1313/post/2021-12-05-%E6%9F%AF%E9%87%8C%E5%8C%96curry/</guid><description>柯里化 Curry 柯里化是一个把具有较多参数的函数转换成具有较少参数函数的过程 &amp;ndash; Kristina Brainwave 柯里化是编程语言中的一个通用的概念（不只是Js，其他很多语言也有柯</description></item><item><title>JS执行流程 作用域 闭包</title><link>http://localhost:1313/post/2021-12-02-js%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link><pubDate>Thu, 02 Dec 2021 23:39:19 +0800</pubDate><guid>http://localhost:1313/post/2021-12-02-js%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid><description>变量提升 (Hoisting) 变量的声明和赋值 函数的声明和赋值 变量提升，是指在 JavaScript 代码执行过程中，JavaScript 引擎把变量的声明部分和函数的声明部分提升到代</description></item><item><title>Vue Router</title><link>http://localhost:1313/vue/2021-11-28-vue-router/</link><pubDate>Sun, 28 Nov 2021 12:04:40 +0800</pubDate><guid>http://localhost:1313/vue/2021-11-28-vue-router/</guid><description>Vue-Router Vue-Router-Base 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // router/index.js import Vue from &amp;#39;vue&amp;#39; import VueRouter from &amp;#39;vue-router&amp;#39; import Index from &amp;#39;../views/Index.vue&amp;#39; // 1. 注册路由插件 // Vue.use是</description></item><item><title>广度优先搜索 BFS</title><link>http://localhost:1313/algo/2021-10-26-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-bfs/</link><pubDate>Tue, 26 Oct 2021 19:21:16 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-26-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-bfs/</guid><description>LeetCode 200. 岛屿数量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Solution { public: int numIslands(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid) { this-&amp;gt;m = grid.size(); this-&amp;gt;n = grid[0].size(); visited =</description></item><item><title>深度优先搜索 DFS</title><link>http://localhost:1313/algo/2021-10-26-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-dfs/</link><pubDate>Tue, 26 Oct 2021 17:16:42 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-26-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-dfs/</guid><description>搜索 LeetCode 17. 电话号码的字母组合 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public: vector&amp;lt;string&amp;gt; letterCombinations(string digits) { this-&amp;gt;digits = digits; alphabet[&amp;#39;2&amp;#39;] = &amp;#34;abc&amp;#34;; alphabet[&amp;#39;3&amp;#39;] = &amp;#34;def&amp;#34;; alphabet[&amp;#39;4&amp;#39;] = &amp;#34;ghi&amp;#34;; alphabet[&amp;#39;5&amp;#39;] = &amp;#34;jkl&amp;#34;; alphabet[&amp;#39;6&amp;#39;] =</description></item><item><title>状态和状态空间</title><link>http://localhost:1313/algo/2021-10-26-%E7%8A%B6%E6%80%81%E5%92%8C%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4/</link><pubDate>Tue, 26 Oct 2021 16:35:42 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-26-%E7%8A%B6%E6%80%81%E5%92%8C%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4/</guid><description>状态 状态空间 状态的简化 指数型状态空间 排列型状态空间</description></item><item><title>双指针扫描 滑动窗口</title><link>http://localhost:1313/algo/2021-10-16-%E5%8F%8C%E6%8C%87%E9%92%88%E6%89%AB%E6%8F%8F-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link><pubDate>Sat, 16 Oct 2021 22:30:35 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-16-%E5%8F%8C%E6%8C%87%E9%92%88%E6%89%AB%E6%8F%8F-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid><description>双指针扫描 LeetCode 167. 两数之和 II - 输入有序数组 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; numbers, int target) { int j = number.size() - 1; for (int i = 0; i &amp;lt;numbers.size(); i++) { while (i &amp;lt; j &amp;amp;&amp;amp; numbers[i] + number[j] &amp;gt; target) j--; if (</description></item><item><title>二维前缀和 差分</title><link>http://localhost:1313/algo/2021-10-14-%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</link><pubDate>Thu, 14 Oct 2021 14:29:20 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-14-%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C/</guid><description>二维前缀和 LeetCode 304. 二维区域和检索 - 矩阵不可变 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class NumMatrix { public NumMatrix(int[][] matrix) { int n = matrix.length; int m = matrix[0].length; sum = new int[n + 1][m + 1]; for (int</description></item><item><title>实现一个LRU缓存</title><link>http://localhost:1313/algo/2021-10-12-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAlru%E7%BC%93%E5%AD%98/</link><pubDate>Tue, 12 Oct 2021 16:45:52 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-12-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAlru%E7%BC%93%E5%AD%98/</guid><description>Cache LeetCode 146. LRU 缓存机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description></item><item><title>哈希表 集合 映射</title><link>http://localhost:1313/algo/2021-10-11-%E5%93%88%E5%B8%8C%E8%A1%A8-%E9%9B%86%E5%90%88-%E6%98%A0%E5%B0%84/</link><pubDate>Mon, 11 Oct 2021 19:50:13 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-11-%E5%93%88%E5%B8%8C%E8%A1%A8-%E9%9B%86%E5%90%88-%E6%98%A0%E5%B0%84/</guid><description>哈希表 哈希函数定义 例子 哈希碰撞 开散列 工程应用 电话号码簿 (姓名 - 号码 string - number) 用户信息表 缓存 (LRU Cache) 键值对存储 (Redis) 时间复杂度 集合与映射 各语言实现 LeetCode 1.两</description></item><item><title>C++数组 字符串</title><link>http://localhost:1313/post/2021-09-29-c++%E6%95%B0%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Wed, 29 Sep 2021 15:36:59 +0800</pubDate><guid>http://localhost:1313/post/2021-09-29-c++%E6%95%B0%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>数组 声明数组 1 2 3 4 5 // type 可以是任意有效的 C++ 数据类型 // arraySize 必须是一个大于零的整数常量 type arrayName [ arraySize ]; double balance[10]; 初始化数组 1 2 3 4 5 6 7 8 9 10 11 12 13 double balance[5] = {1000.0,</description></item><item><title>C++ 修饰符 运算符</title><link>http://localhost:1313/post/2021-09-27-c++%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E8%BF%90%E7%AE%97%E7%AC%A6/</link><pubDate>Mon, 27 Sep 2021 16:40:03 +0800</pubDate><guid>http://localhost:1313/post/2021-09-27-c++%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid><description>修饰符类型 C++ 允许在 char、int 和 double 数据类型前放置修饰符. 数据类型修饰符有: signed unsigned long short 修饰符 signed、unsigned、long 和 short 可应</description></item><item><title>单调队列</title><link>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</link><pubDate>Sun, 26 Sep 2021 22:46:14 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</guid><description>单调队列 239. 滑动窗口最大值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: vector&amp;lt;int&amp;gt; maxSlidingWindow(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { vector&amp;lt;int&amp;gt; ans; // 下标(时间) 递增, 值递减的队列 for (int i = 0;</description></item><item><title>单调栈</title><link>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E6%A0%88/</link><pubDate>Sun, 26 Sep 2021 20:47:37 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E6%A0%88/</guid><description>单调栈 柱状图中最大的矩形 模板题 思考方向: 以一个矩形为确定的高度, 向两侧扩展的范围: 左、右第一个比它矮的矩形 若矩形高度单调递增, 答案是什么? 来</description></item><item><title>表达式求值系列问题</title><link>http://localhost:1313/algo/2021-09-26-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 26 Sep 2021 12:18:55 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</guid><description>表达式求值 150. 逆波兰表达式求值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public: int evalRPN(vector&amp;lt;string&amp;gt;&amp;amp; tokens) { for (string&amp;amp; token: tokens) { if (token == &amp;#34;+&amp;#34; || token == &amp;#34;-&amp;#34; || token == &amp;#34;*&amp;#34; || token</description></item><item><title>栈 队列</title><link>http://localhost:1313/algo/2021-09-26-%E6%A0%88%E9%98%9F%E5%88%97/</link><pubDate>Sun, 26 Sep 2021 11:12:35 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E6%A0%88%E9%98%9F%E5%88%97/</guid><description>栈 Stack 算法中的栈堆一般指栈和二叉堆两个数据结构;和内存中的堆栈不一样; 栈是一种后进先出的数据结构; 队列 queue 队列是一种先进先出, 后进后出的数据结构</description></item><item><title>设计变长数组</title><link>http://localhost:1313/algo/2021-09-25-%E8%AE%BE%E8%AE%A1%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</link><pubDate>Sat, 25 Sep 2021 21:03:05 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-25-%E8%AE%BE%E8%AE%A1%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</guid><description>变长数组 (resizable array) 简易实现</description></item><item><title>数组原理</title><link>http://localhost:1313/algo/2021-09-25-%E6%95%B0%E7%BB%84%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 25 Sep 2021 18:50:08 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-25-%E6%95%B0%E7%BB%84%E5%8E%9F%E7%90%86/</guid><description>数组 数组的基本特点: 支持随机访问 数组的关键: 索引与寻址 数组在内存中是一段连续的存储空间(btw JS数组是哈希表实现) 时间复杂度 type - Lookup/ Access O(1) Insert O(n)</description></item><item><title>从URL输入到展示</title><link>http://localhost:1313/post/2021-09-17-%E4%BB%8Eurl%E8%BE%93%E5%85%A5%E5%88%B0%E5%B1%95%E7%A4%BA/</link><pubDate>Fri, 17 Sep 2021 10:20:34 +0800</pubDate><guid>http://localhost:1313/post/2021-09-17-%E4%BB%8Eurl%E8%BE%93%E5%85%A5%E5%88%B0%E5%B1%95%E7%A4%BA/</guid><description>从进程的角度来看 浏览器进程: 主要负责用户交互、子进程管理和文件储存等功能。 网络进程: 面向渲染进程和浏览器进程等提供网络下载功能。 渲染进程: 主</description></item><item><title>马蜂窝</title><link>http://localhost:1313/in/2021-09-07-%E9%A9%AC%E8%9C%82%E7%AA%9D/</link><pubDate>Tue, 07 Sep 2021 09:41:55 +0800</pubDate><guid>http://localhost:1313/in/2021-09-07-%E9%A9%AC%E8%9C%82%E7%AA%9D/</guid><description>马蜂窝一面 img 预加载； 同步还是异步； 怎么变成同步 JS怎么获取图片宽高 盒模型，IE盒模型 常用布局方式 移动端适配方案 flex 定宽 水平垂直居中 判断数组的方</description></item><item><title>进程/线程 浏览器架构</title><link>http://localhost:1313/post/2021-09-06-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 06 Sep 2021 23:25:39 +0800</pubDate><guid>http://localhost:1313/post/2021-09-06-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</guid><description>并行处理 计算机中的并行处理就是同一时刻处理多个任务 1 2 3 A = 1+2 B = 20/5 C = 7*8 在编写代码的时候，我们可以把这个过程拆分为四个任务： 任务 1 是计算 A</description></item><item><title>原型和原型链</title><link>http://localhost:1313/js/2021-09-05-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</link><pubDate>Sun, 05 Sep 2021 21:11:46 +0800</pubDate><guid>http://localhost:1313/js/2021-09-05-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid><description>Question 如何准确判断一个变量是数组类型 描述new一个对象的过程 1 2 Object.__proto__ === Function.prototype Function.__proto__ === Object.prototype 知识点 构造函数 构造函数 - 扩展 原型规则和示例 原型链 instanceof 1.构造函数 函数有</description></item><item><title>C++ 基本语法</title><link>http://localhost:1313/post/2021-09-02-c++%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 02 Sep 2021 00:47:39 +0800</pubDate><guid>http://localhost:1313/post/2021-09-02-c++%E5%9F%BA%E7%A1%80/</guid><description>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言 支持过程化编程、面向对象编程和泛型编程。 C++ 完全支持面向对象的程序设计，包</description></item><item><title>垃圾收集</title><link>http://localhost:1313/post/2021-05-13-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</link><pubDate>Thu, 13 May 2021 23:13:05 +0800</pubDate><guid>http://localhost:1313/post/2021-05-13-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</guid><description>垃圾收集 JavasScript具有自动垃圾收集机制, 执行环境会负责管理代码执行过程中使用的内存. 标记清除 JavaScript中最常用的垃圾收</description></item><item><title>硬盘格式化如何选择</title><link>http://localhost:1313/post/%E7%A1%AC%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/</link><pubDate>Wed, 12 May 2021 10:26:13 +0800</pubDate><guid>http://localhost:1313/post/%E7%A1%AC%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/</guid><description>Mac格式 1.APFS (推荐) 目前mac最新的文件系统,在确保可靠性的基础上优化了性能 macOS 10.13以后版本使用的文件系统 优点:可靠,安全 缺点:不兼容W</description></item><item><title>1 两数之和</title><link>http://localhost:1313/algo/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link><pubDate>Tue, 11 May 2021 01:12:08 +0800</pubDate><guid>http://localhost:1313/algo/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid><description>LeetCode 1 两数之和 1. 暴力枚举 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { int n = nums.size(); for (int i = 0; i &amp;lt; n; i++) { for (int j = i + 1; j &amp;lt; n; j++) { if (nums[i] + nums[j] == target) { return {i,</description></item><item><title>Charles抓包配置</title><link>http://localhost:1313/post/2021-05-07-charles/</link><pubDate>Fri, 07 May 2021 18:28:10 +0800</pubDate><guid>http://localhost:1313/post/2021-05-07-charles/</guid><description>Charles报错处理 Charles报错Failed to install helper CFErrorDomainLaunchd error 9 打开终端输入launchctl print-disabled system,回车查看com.xk72.ch</description></item><item><title>CentOS上安装nvm</title><link>http://localhost:1313/post/2021-04-20-centos%E4%B8%8A%E5%AE%89%E8%A3%85nvm/</link><pubDate>Tue, 20 Apr 2021 22:14:43 +0800</pubDate><guid>http://localhost:1313/post/2021-04-20-centos%E4%B8%8A%E5%AE%89%E8%A3%85nvm/</guid><description>CentOS上安装nvm 先安装curl,标准CentOS库中提供了Curl软件包 1 sudo dnf install curl 安装nvm 1 2 3 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash 配置~/.ba</description></item><item><title>Webpack4升级到5</title><link>http://localhost:1313/post/2021-04-15-webpack4%E5%8D%87%E7%BA%A7%E5%88%B05/</link><pubDate>Thu, 15 Apr 2021 11:01:09 +0800</pubDate><guid>http://localhost:1313/post/2021-04-15-webpack4%E5%8D%87%E7%BA%A7%E5%88%B05/</guid><description>迁移注意 webpack 5 要求至少 Node.js 10.13.0 (LTS) To v5 from v4 升级步骤 1. webpack webpack-cli等升级 1 2 3 4 yarn add webpack@latest -D yarn add webpack-cli@latest -D yarn add html-webpack-plugin@latest -D // yarn add vue-loader@latest @vue/compiler-sfc -D // vue-loader</description></item><item><title>Vim常用基本操作</title><link>http://localhost:1313/post/2021-04-12-vim%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 12 Apr 2021 11:24:53 +0800</pubDate><guid>http://localhost:1313/post/2021-04-12-vim%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description>Linux常用命令 mkdir make directory 创建目录 rm remove 删除 mv move 移动 cp copy 复制 ls list 罗列 pwd progress working directory 查看当前完整路径 rm -r 文件夹名 //删除目录(递归操作) rm -rf 文件夹名 //</description></item><item><title>费曼学习法</title><link>http://localhost:1313/post/2021-04-07-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</link><pubDate>Wed, 07 Apr 2021 22:31:13 +0800</pubDate><guid>http://localhost:1313/post/2021-04-07-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</guid><description>前言 本来以为最近在整理PromiseA+规范的时候已经很理解Promise了, 结果今天主动向朋友讲解规范和源码的时候, 发现还是会卡壳, 嗯~,</description></item><item><title>Promise API</title><link>http://localhost:1313/post/2021-04-06-promise-api/</link><pubDate>Tue, 06 Apr 2021 23:29:11 +0800</pubDate><guid>http://localhost:1313/post/2021-04-06-promise-api/</guid><description>Promise API 实例方法 Promise.prototype.then() Promise.prototype.catch() Promise.prototype.finally() 静态方法 Promise.all() Promise.race() Promise.allSettled() Promise.any() Promise.resolve() Promise.reject() Promise.all() 参数必须是数组 全部执行完才返回 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 static all (params) { // 判断入参</description></item><item><title>Promises/A+规范 &amp; 实现Promises/A+</title><link>http://localhost:1313/post/2021-04-03-promisea+%E8%A7%84%E8%8C%83/</link><pubDate>Sat, 03 Apr 2021 20:05:13 +0800</pubDate><guid>http://localhost:1313/post/2021-04-03-promisea+%E8%A7%84%E8%8C%83/</guid><description>Terminology “promise” is an object or function with a then method whose behavior conforms to this specification. “thenable” is an object or function that defines a then method. “value” is any legal JavaScript value (including undefined, a thenable, or a promise). “excep</description></item><item><title>算法-准备篇</title><link>http://localhost:1313/post/2021-04-01-%E7%AE%97%E6%B3%95-%E5%87%86%E5%A4%87%E7%AF%87/</link><pubDate>Thu, 01 Apr 2021 23:47:42 +0000</pubDate><guid>http://localhost:1313/post/2021-04-01-%E7%AE%97%E6%B3%95-%E5%87%86%E5%A4%87%E7%AF%87/</guid><description>精通一个领域 Chunk it up 拆分知识点 Deliberate Practicing 刻意练习 Feedback 反馈 国外知乎 Reddit Musk it is important to view knowledge as sort of a semantic tree &amp;ndash; make sure you understand the fundamental principles, ie the trunk and big branches, before you get into the leaves/details or there is nothing for them to hang on</description></item><item><title>JS数据类型</title><link>http://localhost:1313/post/2021-03-20-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 20 Mar 2021 23:46:00 +0800</pubDate><guid>http://localhost:1313/post/2021-03-20-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>数据类型 基本类型 以下基本数据类型是按值访问的,因为可以操作保存在变量中的实际的值 undefined Null Boolean String Number Symbol BigInt 引用类型 引用类型的值是保存在内存中的对象. JS</description></item><item><title>深浅拷贝</title><link>http://localhost:1313/post/2021-03-05-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</link><pubDate>Fri, 05 Mar 2021 16:45:33 +0000</pubDate><guid>http://localhost:1313/post/2021-03-05-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid><description>拷贝一个很多嵌套的对象怎么实现? 写成怎样的深拷贝才算合格 浅拷贝 创建一个新的对象，来接受要重新复制或引用的对象值。 (只能复制一层) 如果对象属性</description></item><item><title>防抖和节流</title><link>http://localhost:1313/post/2021-03-03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</link><pubDate>Wed, 03 Mar 2021 23:46:09 +0000</pubDate><guid>http://localhost:1313/post/2021-03-03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</guid><description>防抖与节流应用场景 防抖: 事件响应函数(doSomething)在一段时间后(300ms)才执行,如果这段时间内再次调用,则重新计算 在一定的时</description></item><item><title>EventLoop事件循环</title><link>http://localhost:1313/post/2021-02-28-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9B%B8%E5%85%B3/</link><pubDate>Sun, 28 Feb 2021 23:11:23 +0000</pubDate><guid>http://localhost:1313/post/2021-02-28-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9B%B8%E5%85%B3/</guid><description>为什么JavaScript是单线程的? JavaScript是一门单线程非阻塞的脚本语言, 作为浏览器脚本语言,JavaScript的主要用途是</description></item><item><title/><link>http://localhost:1313/in/2021-09-15-%E4%BA%AC%E4%B8%9C%E6%83%8A%E5%96%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/in/2021-09-15-%E4%BA%AC%E4%B8%9C%E6%83%8A%E5%96%9C/</guid><description>Vue自定义指令directive webpack loader干嘛的, plugin内部怎么实现; 四次挥手后服务端还可以继续发数据包吗? 继承,继承对象的属性</description></item><item><title/><link>http://localhost:1313/in/2021-11-15-%E5%AD%97%E8%8A%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/in/2021-11-15-%E5%AD%97%E8%8A%82/</guid><description>讲讲最近的一个项目 keep alive实现原理 webpack plugin loader vite的实现原理 xss , csrf 常见的缓存算法有哪些 LRU 还有吗 业务问题, 广告投放怎么做得,怎么盈利,有哪几</description></item></channel></rss>