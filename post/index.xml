<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Zxd's Blog</title><link>http://localhost:1313/post/</link><description>Recent content in Posts on Zxd's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 10 Dec 2021 17:40:54 +0800</lastBuildDate><atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml"/><item><title>DNS</title><link>http://localhost:1313/post/dns/</link><pubDate>Fri, 10 Dec 2021 17:40:54 +0800</pubDate><guid>http://localhost:1313/post/dns/</guid><description>HTTP HTTP (HyperText Transfer Protocol)，超文本传输协议。 HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范。 CDN Content Delivery Network,</description></item><item><title>TCP UDP</title><link>http://localhost:1313/post/2021-12-09-tcp-udp/</link><pubDate>Thu, 09 Dec 2021 00:04:11 +0800</pubDate><guid>http://localhost:1313/post/2021-12-09-tcp-udp/</guid><description>🎃计算机网络结构 应用层 (application layer) 应用层是体系结构中的最高层。应用层的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程间通信</description></item><item><title>柯里化Curry</title><link>http://localhost:1313/post/2021-12-05-%E6%9F%AF%E9%87%8C%E5%8C%96curry/</link><pubDate>Sun, 05 Dec 2021 21:11:44 +0800</pubDate><guid>http://localhost:1313/post/2021-12-05-%E6%9F%AF%E9%87%8C%E5%8C%96curry/</guid><description>柯里化 Curry 柯里化是一个把具有较多参数的函数转换成具有较少参数函数的过程 &amp;ndash; Kristina Brainwave 柯里化是编程语言中的一个通用的概念（不只是Js，其他很多语言也有柯</description></item><item><title>JS执行流程 作用域 闭包</title><link>http://localhost:1313/post/2021-12-02-js%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link><pubDate>Thu, 02 Dec 2021 23:39:19 +0800</pubDate><guid>http://localhost:1313/post/2021-12-02-js%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid><description>变量提升 (Hoisting) 变量的声明和赋值 函数的声明和赋值 变量提升，是指在 JavaScript 代码执行过程中，JavaScript 引擎把变量的声明部分和函数的声明部分提升到代</description></item><item><title>C++数组 字符串</title><link>http://localhost:1313/post/2021-09-29-c++%E6%95%B0%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Wed, 29 Sep 2021 15:36:59 +0800</pubDate><guid>http://localhost:1313/post/2021-09-29-c++%E6%95%B0%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>数组 声明数组 1 2 3 4 5 // type 可以是任意有效的 C++ 数据类型 // arraySize 必须是一个大于零的整数常量 type arrayName [ arraySize ]; double balance[10]; 初始化数组 1 2 3 4 5 6 7 8 9 10 11 12 13 double balance[5] = {1000.0,</description></item><item><title>C++ 修饰符 运算符</title><link>http://localhost:1313/post/2021-09-27-c++%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E8%BF%90%E7%AE%97%E7%AC%A6/</link><pubDate>Mon, 27 Sep 2021 16:40:03 +0800</pubDate><guid>http://localhost:1313/post/2021-09-27-c++%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid><description>修饰符类型 C++ 允许在 char、int 和 double 数据类型前放置修饰符. 数据类型修饰符有: signed unsigned long short 修饰符 signed、unsigned、long 和 short 可应</description></item><item><title>从URL输入到展示</title><link>http://localhost:1313/post/2021-09-17-%E4%BB%8Eurl%E8%BE%93%E5%85%A5%E5%88%B0%E5%B1%95%E7%A4%BA/</link><pubDate>Fri, 17 Sep 2021 10:20:34 +0800</pubDate><guid>http://localhost:1313/post/2021-09-17-%E4%BB%8Eurl%E8%BE%93%E5%85%A5%E5%88%B0%E5%B1%95%E7%A4%BA/</guid><description>从进程的角度来看 浏览器进程: 主要负责用户交互、子进程管理和文件储存等功能。 网络进程: 面向渲染进程和浏览器进程等提供网络下载功能。 渲染进程: 主</description></item><item><title>进程/线程 浏览器架构</title><link>http://localhost:1313/post/2021-09-06-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 06 Sep 2021 23:25:39 +0800</pubDate><guid>http://localhost:1313/post/2021-09-06-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</guid><description>并行处理 计算机中的并行处理就是同一时刻处理多个任务 1 2 3 A = 1+2 B = 20/5 C = 7*8 在编写代码的时候，我们可以把这个过程拆分为四个任务： 任务 1 是计算 A</description></item><item><title>C++ 基本语法</title><link>http://localhost:1313/post/2021-09-02-c++%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 02 Sep 2021 00:47:39 +0800</pubDate><guid>http://localhost:1313/post/2021-09-02-c++%E5%9F%BA%E7%A1%80/</guid><description>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言 支持过程化编程、面向对象编程和泛型编程。 C++ 完全支持面向对象的程序设计，包</description></item><item><title>垃圾收集</title><link>http://localhost:1313/post/2021-05-13-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</link><pubDate>Thu, 13 May 2021 23:13:05 +0800</pubDate><guid>http://localhost:1313/post/2021-05-13-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</guid><description>垃圾收集 JavasScript具有自动垃圾收集机制, 执行环境会负责管理代码执行过程中使用的内存. 标记清除 JavaScript中最常用的垃圾收</description></item><item><title>硬盘格式化如何选择</title><link>http://localhost:1313/post/%E7%A1%AC%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/</link><pubDate>Wed, 12 May 2021 10:26:13 +0800</pubDate><guid>http://localhost:1313/post/%E7%A1%AC%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/</guid><description>Mac格式 1.APFS (推荐) 目前mac最新的文件系统,在确保可靠性的基础上优化了性能 macOS 10.13以后版本使用的文件系统 优点:可靠,安全 缺点:不兼容W</description></item><item><title>Charles抓包配置</title><link>http://localhost:1313/post/2021-05-07-charles/</link><pubDate>Fri, 07 May 2021 18:28:10 +0800</pubDate><guid>http://localhost:1313/post/2021-05-07-charles/</guid><description>Charles报错处理 Charles报错Failed to install helper CFErrorDomainLaunchd error 9 打开终端输入launchctl print-disabled system,回车查看com.xk72.ch</description></item><item><title>CentOS上安装nvm</title><link>http://localhost:1313/post/2021-04-20-centos%E4%B8%8A%E5%AE%89%E8%A3%85nvm/</link><pubDate>Tue, 20 Apr 2021 22:14:43 +0800</pubDate><guid>http://localhost:1313/post/2021-04-20-centos%E4%B8%8A%E5%AE%89%E8%A3%85nvm/</guid><description>CentOS上安装nvm 先安装curl,标准CentOS库中提供了Curl软件包 1 sudo dnf install curl 安装nvm 1 2 3 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash 配置~/.ba</description></item><item><title>Webpack4升级到5</title><link>http://localhost:1313/post/2021-04-15-webpack4%E5%8D%87%E7%BA%A7%E5%88%B05/</link><pubDate>Thu, 15 Apr 2021 11:01:09 +0800</pubDate><guid>http://localhost:1313/post/2021-04-15-webpack4%E5%8D%87%E7%BA%A7%E5%88%B05/</guid><description>迁移注意 webpack 5 要求至少 Node.js 10.13.0 (LTS) To v5 from v4 升级步骤 1. webpack webpack-cli等升级 1 2 3 4 yarn add webpack@latest -D yarn add webpack-cli@latest -D yarn add html-webpack-plugin@latest -D // yarn add vue-loader@latest @vue/compiler-sfc -D // vue-loader</description></item><item><title>Vim常用基本操作</title><link>http://localhost:1313/post/2021-04-12-vim%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 12 Apr 2021 11:24:53 +0800</pubDate><guid>http://localhost:1313/post/2021-04-12-vim%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description>Linux常用命令 mkdir make directory 创建目录 rm remove 删除 mv move 移动 cp copy 复制 ls list 罗列 pwd progress working directory 查看当前完整路径 rm -r 文件夹名 //删除目录(递归操作) rm -rf 文件夹名 //</description></item><item><title>费曼学习法</title><link>http://localhost:1313/post/2021-04-07-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</link><pubDate>Wed, 07 Apr 2021 22:31:13 +0800</pubDate><guid>http://localhost:1313/post/2021-04-07-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</guid><description>前言 本来以为最近在整理PromiseA+规范的时候已经很理解Promise了, 结果今天主动向朋友讲解规范和源码的时候, 发现还是会卡壳, 嗯~,</description></item><item><title>Promise API</title><link>http://localhost:1313/post/2021-04-06-promise-api/</link><pubDate>Tue, 06 Apr 2021 23:29:11 +0800</pubDate><guid>http://localhost:1313/post/2021-04-06-promise-api/</guid><description>Promise API 实例方法 Promise.prototype.then() Promise.prototype.catch() Promise.prototype.finally() 静态方法 Promise.all() Promise.race() Promise.allSettled() Promise.any() Promise.resolve() Promise.reject() Promise.all() 参数必须是数组 全部执行完才返回 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 static all (params) { // 判断入参</description></item><item><title>Promises/A+规范 &amp; 实现Promises/A+</title><link>http://localhost:1313/post/2021-04-03-promisea+%E8%A7%84%E8%8C%83/</link><pubDate>Sat, 03 Apr 2021 20:05:13 +0800</pubDate><guid>http://localhost:1313/post/2021-04-03-promisea+%E8%A7%84%E8%8C%83/</guid><description>Terminology “promise” is an object or function with a then method whose behavior conforms to this specification. “thenable” is an object or function that defines a then method. “value” is any legal JavaScript value (including undefined, a thenable, or a promise). “excep</description></item><item><title>算法-准备篇</title><link>http://localhost:1313/post/2021-04-01-%E7%AE%97%E6%B3%95-%E5%87%86%E5%A4%87%E7%AF%87/</link><pubDate>Thu, 01 Apr 2021 23:47:42 +0000</pubDate><guid>http://localhost:1313/post/2021-04-01-%E7%AE%97%E6%B3%95-%E5%87%86%E5%A4%87%E7%AF%87/</guid><description>精通一个领域 Chunk it up 拆分知识点 Deliberate Practicing 刻意练习 Feedback 反馈 国外知乎 Reddit Musk it is important to view knowledge as sort of a semantic tree &amp;ndash; make sure you understand the fundamental principles, ie the trunk and big branches, before you get into the leaves/details or there is nothing for them to hang on</description></item><item><title>JS数据类型</title><link>http://localhost:1313/post/2021-03-20-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 20 Mar 2021 23:46:00 +0800</pubDate><guid>http://localhost:1313/post/2021-03-20-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>数据类型 基本类型 以下基本数据类型是按值访问的,因为可以操作保存在变量中的实际的值 undefined Null Boolean String Number Symbol BigInt 引用类型 引用类型的值是保存在内存中的对象. JS</description></item><item><title>深浅拷贝</title><link>http://localhost:1313/post/2021-03-05-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</link><pubDate>Fri, 05 Mar 2021 16:45:33 +0000</pubDate><guid>http://localhost:1313/post/2021-03-05-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid><description>拷贝一个很多嵌套的对象怎么实现? 写成怎样的深拷贝才算合格 浅拷贝 创建一个新的对象，来接受要重新复制或引用的对象值。 (只能复制一层) 如果对象属性</description></item><item><title>防抖和节流</title><link>http://localhost:1313/post/2021-03-03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</link><pubDate>Wed, 03 Mar 2021 23:46:09 +0000</pubDate><guid>http://localhost:1313/post/2021-03-03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</guid><description>防抖与节流应用场景 防抖: 事件响应函数(doSomething)在一段时间后(300ms)才执行,如果这段时间内再次调用,则重新计算 在一定的时</description></item><item><title>EventLoop事件循环</title><link>http://localhost:1313/post/2021-02-28-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9B%B8%E5%85%B3/</link><pubDate>Sun, 28 Feb 2021 23:11:23 +0000</pubDate><guid>http://localhost:1313/post/2021-02-28-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9B%B8%E5%85%B3/</guid><description>为什么JavaScript是单线程的? JavaScript是一门单线程非阻塞的脚本语言, 作为浏览器脚本语言,JavaScript的主要用途是</description></item></channel></rss>