<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Zxd's Blog</title><link>http://localhost:1313/post/</link><description>Recent content in Posts on Zxd's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 10 Apr 2021 20:33:47 +0800</lastBuildDate><atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml"/><item><title>浏览器事件模型</title><link>http://localhost:1313/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</link><pubDate>Sat, 10 Apr 2021 20:33:47 +0800</pubDate><guid>http://localhost:1313/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</guid><description>详解浏览器事件捕获,冒泡 三个阶段: 捕获阶段 目标阶段 冒泡阶段 第三个参数 (默认false) 1 window.addEventListener(&amp;#39;click&amp;#39;,()=&amp;gt;{},false) false: 监听冒泡阶段 true: 监听捕获阶段 ajax 及 fetch API XMLHTTPRequest 1 2 const xhr = new</description></item><item><title>费曼学习法</title><link>http://localhost:1313/post/2021-04-07-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</link><pubDate>Wed, 07 Apr 2021 22:31:13 +0800</pubDate><guid>http://localhost:1313/post/2021-04-07-%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</guid><description>前言 本来以为最近在整理PromiseA+规范的时候已经很理解Promise了, 结果今天主动向朋友讲解规范和源码的时候, 发现还是会卡壳, 嗯~,</description></item><item><title>Promise API</title><link>http://localhost:1313/post/2021-04-06-promise-api/</link><pubDate>Tue, 06 Apr 2021 23:29:11 +0800</pubDate><guid>http://localhost:1313/post/2021-04-06-promise-api/</guid><description>Promise API 实例方法 Promise.prototype.then() Promise.prototype.catch() Promise.prototype.finally() 静态方法 Promise.all() Promise.race() Promise.allSettled() Promise.any() Promise.resolve() Promise.reject() Promise.all() 参数必须是数组 要保证返回结果顺序要与数组中顺序一致 一起执行,全部执行完才返回 1 2 3 4 5 6 7 8 9 10 11 12</description></item><item><title>Promises/A+规范 &amp; 实现Promises/A+</title><link>http://localhost:1313/post/2021-04-03-promisea+%E8%A7%84%E8%8C%83/</link><pubDate>Sat, 03 Apr 2021 20:05:13 +0800</pubDate><guid>http://localhost:1313/post/2021-04-03-promisea+%E8%A7%84%E8%8C%83/</guid><description>Terminology “promise” is an object or function with a then method whose behavior conforms to this specification. “thenable” is an object or function that defines a then method. “value” is any legal JavaScript value (including undefined, a thenable, or a promise). “excep</description></item><item><title>算法day01</title><link>http://localhost:1313/post/2021-04-01-%E7%AE%97%E6%B3%95day01/</link><pubDate>Thu, 01 Apr 2021 23:47:42 +0000</pubDate><guid>http://localhost:1313/post/2021-04-01-%E7%AE%97%E6%B3%95day01/</guid><description>精通一个领域 Chunk it up 拆分知识点 Deliberate Practicing 刻意练习 Feedback 反馈 国外知乎 Reddit Musk it is important to view knowledge as sort of a semantic tree &amp;ndash; make sure you understand the fundamental principles, ie the trunk and big branches, before you get into the leaves/details or there is nothing for them to hang on</description></item><item><title>JS数据类型</title><link>http://localhost:1313/post/2021-03-20-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 20 Mar 2021 23:46:00 +0800</pubDate><guid>http://localhost:1313/post/2021-03-20-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>数据类型 基础类型 undefined Null Boolean String Number Symbol BigInt 引用类型 Object Array RegExp Date Math Function 存储 基础类型存储在栈内存, 被引用或者拷贝时，会创建一个完全相等的变量 引用类型存储在堆内存，</description></item><item><title>深浅拷贝</title><link>http://localhost:1313/post/2021-03-05-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</link><pubDate>Fri, 05 Mar 2021 16:45:33 +0000</pubDate><guid>http://localhost:1313/post/2021-03-05-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid><description>拷贝一个很多嵌套的对象怎么实现? 写成怎样的深拷贝才算合格 浅拷贝 创建一个新的对象，来接受要重新复制或引用的对象值。 (只能复制一层) 如果对象属性</description></item><item><title>防抖和节流</title><link>http://localhost:1313/post/2021-03-03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</link><pubDate>Wed, 03 Mar 2021 23:46:09 +0000</pubDate><guid>http://localhost:1313/post/2021-03-03-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</guid><description>防抖与节流应用场景 防抖: 事件响应函数(doSomething)在一段时间后(300ms)才执行,如果这段时间内再次调用,则重新计算 在一定的时</description></item><item><title>EventLoop事件循环</title><link>http://localhost:1313/post/2021-02-28-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9B%B8%E5%85%B3/</link><pubDate>Sun, 28 Feb 2021 23:11:23 +0000</pubDate><guid>http://localhost:1313/post/2021-02-28-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9B%B8%E5%85%B3/</guid><description>为什么JavaScript是单线程的? JavaScript是一门单线程非阻塞的脚本语言, 作为浏览器脚本语言,JavaScript的主要用途是</description></item><item><title>Hexo+Github Pages搭建blog</title><link>http://localhost:1313/post/2020-02-25-hexo-github-pages%E6%90%AD%E5%BB%BAblog/</link><pubDate>Thu, 25 Feb 2021 23:34:03 +0000</pubDate><guid>http://localhost:1313/post/2020-02-25-hexo-github-pages%E6%90%AD%E5%BB%BAblog/</guid><description>安装Hexo https://hexo.io/zh-cn/docs/ 1 npm install hexo 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 1 2 3 $ hexo init &amp;lt;folder&amp;gt; $ cd &amp;lt;folder&amp;gt; $ npm install 启动服务 1 2 $ hexo g</description></item></channel></rss>