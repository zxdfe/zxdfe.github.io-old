<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algo on Zxd's Blog</title><link>http://localhost:1313/tags/algo/</link><description>Recent content in algo on Zxd's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 12 Oct 2021 16:45:52 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/algo/index.xml" rel="self" type="application/rss+xml"/><item><title>实现一个LRU缓存</title><link>http://localhost:1313/algo/2021-10-12-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAlru%E7%BC%93%E5%AD%98/</link><pubDate>Tue, 12 Oct 2021 16:45:52 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-12-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAlru%E7%BC%93%E5%AD%98/</guid><description>Cache LeetCode 146. LRU 缓存机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description></item><item><title>哈希表 集合 映射</title><link>http://localhost:1313/algo/2021-10-11-%E5%93%88%E5%B8%8C%E8%A1%A8-%E9%9B%86%E5%90%88-%E6%98%A0%E5%B0%84/</link><pubDate>Mon, 11 Oct 2021 19:50:13 +0800</pubDate><guid>http://localhost:1313/algo/2021-10-11-%E5%93%88%E5%B8%8C%E8%A1%A8-%E9%9B%86%E5%90%88-%E6%98%A0%E5%B0%84/</guid><description>哈希表 哈希函数定义 例子 哈希碰撞 开散列 工程应用 电话号码簿 (姓名 - 号码 string - number) 用户信息表 缓存 (LRU Cache) 键值对存储 (Redis) 时间复杂度 集合与映射 各语言实现 LeetCode 1.两</description></item><item><title>单调队列</title><link>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</link><pubDate>Sun, 26 Sep 2021 22:46:14 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</guid><description>单调队列 239. 滑动窗口最大值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: vector&amp;lt;int&amp;gt; maxSlidingWindow(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { vector&amp;lt;int&amp;gt; ans; // 下标(时间) 递增, 值递减的队列 for (int i = 0;</description></item><item><title>单调栈</title><link>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E6%A0%88/</link><pubDate>Sun, 26 Sep 2021 20:47:37 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E5%8D%95%E8%B0%83%E6%A0%88/</guid><description>单调栈 柱状图中最大的矩形 模板题 思考方向: 以一个矩形为确定的高度, 向两侧扩展的范围: 左、右第一个比它矮的矩形 若矩形高度单调递增, 答案是什么? 来</description></item><item><title>表达式求值系列问题</title><link>http://localhost:1313/algo/2021-09-26-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 26 Sep 2021 12:18:55 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98/</guid><description>表达式求值 150. 逆波兰表达式求值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public: int evalRPN(vector&amp;lt;string&amp;gt;&amp;amp; tokens) { for (string&amp;amp; token: tokens) { if (token == &amp;#34;+&amp;#34; || token == &amp;#34;-&amp;#34; || token == &amp;#34;*&amp;#34; || token</description></item><item><title>栈 队列</title><link>http://localhost:1313/algo/2021-09-26-%E6%A0%88%E9%98%9F%E5%88%97/</link><pubDate>Sun, 26 Sep 2021 11:12:35 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-26-%E6%A0%88%E9%98%9F%E5%88%97/</guid><description>栈 Stack 算法中的栈堆一般指栈和二叉堆两个数据结构;和内存中的堆栈不一样; 栈是一种后进先出的数据结构; 队列 queue 队列是一种先进先出, 后进后出的数据结构</description></item><item><title>设计变长数组</title><link>http://localhost:1313/algo/2021-09-25-%E8%AE%BE%E8%AE%A1%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</link><pubDate>Sat, 25 Sep 2021 21:03:05 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-25-%E8%AE%BE%E8%AE%A1%E5%8F%98%E9%95%BF%E6%95%B0%E7%BB%84/</guid><description>变长数组 (resizable array) 简易实现</description></item><item><title>数组原理</title><link>http://localhost:1313/algo/2021-09-25-%E6%95%B0%E7%BB%84%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 25 Sep 2021 18:50:08 +0800</pubDate><guid>http://localhost:1313/algo/2021-09-25-%E6%95%B0%E7%BB%84%E5%8E%9F%E7%90%86/</guid><description>数组 数组的基本特点: 支持随机访问 数组的关键: 索引与寻址 数组在内存中是一段连续的存储空间(btw JS数组是哈希表实现) 时间复杂度 type - Lookup/ Access O(1) Insert O(n)</description></item></channel></rss>